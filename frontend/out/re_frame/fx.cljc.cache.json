["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$set-timeout!","~$re-frame.interop"],"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:imports",null,"~:requires",["^ ","^8","^8","~$re-frame.interceptor","^?","~$re-frame.events","^@","~$re-frame.trace","^A","~$re-frame.registrar","^B","~$router","~$re-frame.router","^D","^D","~$trace","^A","~$events","^@","^6","^6","~$re-frame.db","^G"],"~:uses",["^ ","^5","^6","~$app-db","^G","~$->interceptor","^?","^7","^8","~$get-handler","^B","~$clear-handlers","^B","~$register-handler","^B"],"~:defs",["^ ","~$kind",["^ ","^;","~$re-frame.fx/kind","~:file","out/re_frame/fx.cljc","~:line",15,"~:column",1,"~:end-line",15,"~:end-column",10,"~:meta",["^ ","^Q","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/fx.cljc","^R",15,"^S",6,"^T",15,"^U",10],"~:tag","~$cljs.core/Keyword"],"~$reg-fx",["^ ","~:protocol-inline",null,"^V",["^ ","^Q","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/fx.cljc","^R",18,"^S",7,"^T",18,"^U",13,"~:arglists",["~#list",["~$quote",["^10",[["~$id","~$handler"]]]]],"~:doc","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"^;","~$re-frame.fx/reg-fx","~:variadic",false,"^Q","out/re_frame/fx.cljc","^U",13,"~:method-params",["^10",[["^12","^13"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^S",1,"^R",18,"^T",18,"~:max-fixed-arity",2,"~:fn-var",true,"^[",["^10",["^11",["^10",[["^12","^13"]]]]],"^14","Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."],"~$do-fx",["^ ","^;","~$re-frame.fx/do-fx","^Q","out/re_frame/fx.cljc","^R",47,"^S",1,"^T",47,"^U",11,"^V",["^ ","^Q","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/fx.cljc","^R",47,"^S",6,"^T",47,"^U",11],"^14","An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.","^W","~$any"]],"~:require-macros",["^ ","^E","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^:",["~:db","~:do-fx","~:start","~:dispatch-n","~:duration","~:deregister-event-handler","~:dispatch","~:after","~:event/do-fx","~:id","~:effects","~:error","~:end","~:ms","~:fx","~:op-type","~:dispatch-later"]],"~:order",["^1P","^1K","^1C","^1I","^1Q","^1J","^1D","^1F","^1N","^1L","^1M","^1R","^1O","^1H","^1E","^1G","^1B"]],"^14",null]