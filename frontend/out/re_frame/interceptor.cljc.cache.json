["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$empty-queue","~$re-frame.interop","~$debug-enabled?","^8"],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","^6","^6","^8","^8","~$trace","~$re-frame.trace","^A","^A","~$set","~$clojure.set","^C","^C"],"~:uses",["^ ","^5","^6","^7","^8","^9","^8"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","~:line",43,"~:column",7,"~:end-line",43,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^O",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",3,"~:method-params",[["^O",["^Q","^R","~$f","^S"]]],"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]],"~:arglists-meta",["^O",[null]]]],"^<","~$re-frame.interceptor/update-effect","^U",true,"^I","out/re_frame/interceptor.cljc","^M",20,"^T",["^ ","^U",true,"^V",3,"^W",[["^O",["^Q","^R","~$f","^S"]]],"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]],"^X",["^O",[null]]],"^W",[["^O",["^Q","^R","~$f","^S"]]],"~:protocol-impl",null,"^X",["^O",[null]],"^K",1,"^J",43,"^L",43,"^V",3,"~:fn-var",true,"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]]],"~$invoke-interceptors",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",75,"^K",8,"^L",75,"^M",27,"~:private",true,"^N",["^O",["^P",["^O",[["^Q","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^11",true,"^<","~$re-frame.interceptor/invoke-interceptors","^U",false,"^I","out/re_frame/interceptor.cljc","^M",27,"^W",["^O",[["^Q","^12"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",75,"^L",75,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^12"]]]]],"^13","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",57,"^K",7,"^L",57,"^M",21,"^N",["^O",["^P",["^O",[["^Q","^R","~$value"]]]]]],"^<","~$re-frame.interceptor/assoc-coeffect","^U",false,"^I","out/re_frame/interceptor.cljc","^M",21,"^W",["^O",[["^Q","^R","^16"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",57,"^L",57,"^V",3,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^R","^16"]]]]]],"~$update-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",61,"^K",7,"^L",61,"^M",22,"^N",["^O",["^P",["^O",[["^Q","^R","~$f","~$&","^S"]]]]],"^T",["^ ","^U",true,"^V",3,"^W",[["^O",["^Q","^R","~$f","^S"]]],"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]],"^X",["^O",[null]]]],"^<","~$re-frame.interceptor/update-coeffect","^U",true,"^I","out/re_frame/interceptor.cljc","^M",22,"^T",["^ ","^U",true,"^V",3,"^W",[["^O",["^Q","^R","~$f","^S"]]],"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]],"^X",["^O",[null]]],"^W",[["^O",["^Q","^R","~$f","^S"]]],"^Z",null,"^X",["^O",[null]],"^K",1,"^J",61,"^L",61,"^V",3,"^[",true,"^N",["^O",[["^Q","^R","~$f","~$&","^S"]]]],"~$invoke-interceptor-fn",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",68,"^K",8,"^L",68,"^M",29,"^11",true,"^N",["^O",["^P",["^O",[["^Q","~$interceptor","^12"]]]]]],"^11",true,"^<","~$re-frame.interceptor/invoke-interceptor-fn","^U",false,"^I","out/re_frame/interceptor.cljc","^M",29,"^W",["^O",[["^Q","^1;","^12"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",68,"^L",68,"^V",3,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^1;","^12"]]]]]],"~$get-effect",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",31,"^K",7,"^L",31,"^M",17,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^R"],["^Q","^R","~$not-found"]]]]],"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^X",["^O",[null,null,null]]]],"^<","~$re-frame.interceptor/get-effect","^U",false,"^I","out/re_frame/interceptor.cljc","^M",17,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^X",["^O",[null,null,null]]],"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^Z",null,"^X",["^O",[null,null,null]],"^K",1,"^J",31,"^L",31,"^V",3,"^[",true,"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]]],"~$->interceptor",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",17,"^K",7,"^L",17,"^M",20,"^N",["^O",["^P",["^O",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^13","Create an interceptor from named arguments","^T",["^ ","^U",true,"^V",0,"^W",[["^O",[["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^N",["^O",[["~$&",["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^X",["^O",[null]]]],"^<","~$re-frame.interceptor/->interceptor","^U",true,"^I","out/re_frame/interceptor.cljc","^M",20,"^T",["^ ","^U",true,"^V",0,"^W",[["^O",[["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^N",["^O",[["~$&",["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^X",["^O",[null]]],"^W",[["^O",[["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^Z",null,"^X",["^O",[null]],"^K",1,"^J",17,"^L",17,"^V",0,"^[",true,"^N",["^O",[["~$&",["^ ","^1A","~$m","^1B",["^1C","^1D","^1E"]]]]],"^13","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",49,"^K",7,"^L",49,"^M",19,"^N",["^O",["^P",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]]]],"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^X",["^O",[null,null,null]]]],"^<","~$re-frame.interceptor/get-coeffect","^U",false,"^I","out/re_frame/interceptor.cljc","^M",19,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^X",["^O",[null,null,null]]],"^W",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]],"^Z",null,"^X",["^O",[null,null,null]],"^K",1,"^J",49,"^L",49,"^V",3,"^[",true,"^N",["^O",[["^Q"],["^Q","^R"],["^Q","^R","^1>"]]]],"~$execute",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",149,"^K",7,"^L",149,"^M",14,"^N",["^O",["^P",["^O",[["~$event-v","~$interceptors"]]]]],"^13","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^<","~$re-frame.interceptor/execute","^U",false,"^I","out/re_frame/interceptor.cljc","^M",14,"^W",["^O",[["^1J","^1K"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",149,"^L",149,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[["^1J","^1K"]]]]],"^13","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",39,"^K",7,"^L",39,"^M",19,"^N",["^O",["^P",["^O",[["^Q","^R","^16"]]]]]],"^<","~$re-frame.interceptor/assoc-effect","^U",false,"^I","out/re_frame/interceptor.cljc","^M",19,"^W",["^O",[["^Q","^R","^16"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",39,"^L",39,"^V",3,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^R","^16"]]]]]],"~$enqueue",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",112,"^K",7,"^L",112,"^M",14,"^N",["^O",["^P",["^O",[["^Q","^1K"]]]]],"^13","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^<","~$re-frame.interceptor/enqueue","^U",false,"^I","out/re_frame/interceptor.cljc","^M",14,"^W",["^O",[["^Q","^1K"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",112,"^L",112,"^V",2,"^[",true,"^N",["^O",["^P",["^O",[["^Q","^1K"]]]]],"^13","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^<","~$re-frame.interceptor/mandatory-interceptor-keys","^I","out/re_frame/interceptor.cljc","^J",9,"^K",1,"^L",9,"^M",32,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",9,"^K",6,"^L",9,"^M",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",11,"^K",7,"^L",11,"^M",19,"^N",["^O",["^P",["^O",[["~$m"]]]]]],"^<","~$re-frame.interceptor/interceptor?","^U",false,"^I","out/re_frame/interceptor.cljc","^M",19,"^W",["^O",[["~$m"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",11,"^L",11,"^V",1,"^[",true,"^N",["^O",["^P",["^O",[["~$m"]]]]]],"~$change-direction",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",135,"^K",8,"^L",135,"^M",24,"^11",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^13","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^11",true,"^<","~$re-frame.interceptor/change-direction","^U",false,"^I","out/re_frame/interceptor.cljc","^M",24,"^W",["^O",[["^Q"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",135,"^L",135,"^V",1,"^[",true,"^N",["^O",["^P",["^O",[["^Q"]]]]],"^13","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^Q",["^ ","^G",null,"^H",["^ ","^I","/Users/brianlitwin/Desktop/projects/flashcards/frontend/out/re_frame/interceptor.cljc","^J",124,"^K",8,"^L",124,"^M",15,"^11",true,"^N",["^O",["^P",["^O",[["~$event","^1K"],["^1Y","^1K","~$db"]]]]],"^13","Create a fresh context","^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^N",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^X",["^O",[null,null]]]],"^11",true,"^<","~$re-frame.interceptor/context","^U",false,"^I","out/re_frame/interceptor.cljc","^M",15,"^T",["^ ","^U",false,"^V",3,"^W",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^N",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^X",["^O",[null,null]]],"^W",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^Z",null,"^X",["^O",[null,null]],"^K",1,"^J",124,"^L",124,"^V",3,"^[",true,"^N",["^O",[["^1Y","^1K"],["^1Y","^1K","^1Z"]]],"^13","Create a fresh context"]],"~:require-macros",["^ ","^@","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^28","^29","^2?","^2<","^23","^2:","^2=","^26","^2;","^27","^25","^24","^2>"]],"^13",null]