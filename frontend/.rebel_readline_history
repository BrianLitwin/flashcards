1573842314755:c
1573913949858:(:set-url :home)
1573914128391:(ns frontend.router\n  (:require [bide.core :as bide]\n            [re-frame.core :as rf]))
1573914136505:router
1573914140754:(router)
1573914145531:router
1573914149369:(prn router)
1573914166456:(bide/match router :home)
1573914264530:(require '[re-frame.core])
1573914278674:(rf/dispatch [:set-url :home])
1573914292681:(require '[re-frame.core :as rf\n           ])
1573914298489:(rf/dispatch [:set-url :home])
1573914349810:(rf/dispatch [:set-url :groups])
1573914510618:(rf/dispatch [:set-url "/groups"])
1573914585251:(require '[bide.core :as bide])
1573914595474:(bide/match router :home)
1573914604942:(defn on-navigate\n    "A function which will be called on each route change."\n    [name params query]\n    (println "Route change to: " name params query))\n\n(def router\n  (bide/router\n    [["/home" :home]\n     ["/groups" :groups]\n     ["/new-list" :new-list]\n     ["/lists" :lists]\n     ["session" :session]\n     ["*" :not-found]]))
1573914631706:(bide/match router :home)
1573914654652:(bide/match router "/home")
1573914664152:(bide/match router "/groupse")
1573914669747:(bide/match router "/groups")
1573914758690:(bide/match router "/groupse")
1573914762537:(def page :home)
1573914770666:(-> page (subs 1) keyword)
1573914837921:(bode/resolve :home)
1573914845289:(bide/resolve :home)
1573920496961:(bide/resolve )
1573920503743:(bide/match "home")
1573920515514:(bide/match "/\nhome")
1573920530537:(bide/match router "/home")
1573920538122:(bide/match router "home")
1573920546457:(bide/match router :home)
1573920684286:(rf/dispatch "/home")
1573920701793:(rf/dispatch [:set-url "/home"])
1573920711001:(bide/match router "/home")
1573920732176:(bide/match router "\nhome")
1573920748006:(bide/match router "home")
1573920759127:(rf/dispatch [:set-url "home"])
1573920922459:(rf/reg-fx\n  :set-url\n  (fn [page]\n    (apply on-navigate (bide/match router (str "/" page)))\n    (js/window.history.pushState nil nil page)))
1573920966705:(on-navigate "home")
1573921114658:(ns frontend.router\n  (:require [bide.core :as bide]\n            [re-frame.core :as rf]))
1573921125412:(set-url "home")
1573924134464:(rf/subscribe [:lists])
1573936531667:(rf/subscribe [:session/select-list])
1573937604470:(rf/subscribe [:session/list])
1573937611659:@(rf/subscribe [:session/list])
1573991830114:@(rf/subscribe [:session/cards])
1573991843864:@(rf/subscribe [:session/list])
1573994802473:@(rf/subscribe [:session/answer])
1573994911767:@(rf/subscribe [:session/set-answer true])
1573994992503:@(rf/subscribe [:session/set-answer false])
1573995011226:(rf/dispatche [:session/set-answer false])
1573995026059:(rf/dispatch [:session/set-answer false])
1574000081196:@(rf/subscribe [:session/can-inc 1])
1574000129865:@(rf/subscribe [:session/cant-inc 1])
1574000151896:(rf/dispatch [:session/inc-card 1])
1574001627286:@(rf/subscribe [:session/card-index])
1574002231657:@(rf/subscribe [:session/ready-to-finish])
1574007300737:(rf/dispatch [:create-session 1])
1574007936230:(rf/dispatch [:create-session 5])
1574008152037:@(rf/subscribe [:session/session])
1574020929366:@(rf/subscribe [:stats/sessions])
1574033550133:@(rf/subscribe [:session/select-list])
1574033929787:@(rf/subscribe [:session/list])
1574207520943:@(rf/subscribe [:stats/table-stats])
1574207542136:(require '[re-reframe.core :as rf])
1574207556203:(require '[re-frame.core :as rf])
1574207580856:@(rf/subscribe [:stats/table-stats])
1574207620957:(def sessions @(rf/subscribe [:stats/sessions])\n  )
1574207622838:sessions
1574207645055:(map :answers sessions)
1574207654205:(def answer-vecs (map :answers sessions))
1574207663029:(def answer-maps (map map-card-ids answer-vecs))
1574207671710:(defn map-card-ids [answers]\n  (reduce\n  (fn [map {:keys [card correct]}] (assoc map card correct))\n  {}\n  answers))
1574207677997:(def answer-maps (map map-card-ids answer-vecs))
1574207681510:answer-maps
1574207731855:(def list @(rf/subscribe [:stats/list]))
1574207739058:list
1574207748684:(:cards list)
1574207754362:(def cards (:cards list))
1574207756016:cards
1574207767157:(get answers 2)
1574207770829:answers
1574207778075:(get answer-maps  2)
1574207782489:answer-maps
1574207798613:(def answer-maps (mapv map-card-ids answer-vecs))
1574207803126:answer-maps
1574207887243:(get answer-maps  2)
1574207948754:(defn combine-question-answers [cards answers]\n  (cons\n    (mapv :question cards)\n    (doall (for [answer-map answers] get-answers))))
1574207955725:(defn get-answers [cards answers]\n  (reduce\n    (fn [[vec {:keys [id]}]]\n       (conj vec (id answers)))\n    []\n    cards))
1574207975374:(get-answers cards answer-maps)
1574208020203:(defn get-answers [cards answers]\n  (reduce\n    (fn [[vec card]]\n       (conj vec ((:id card) answers)))\n    []\n    cards))
1574208026122:(get-answers cards answer-maps)
1574208193857:(def t {2 2})
1574208196912:(get t 2)
1574208211202:(def t {2 2})(defn get-answers [cards answers]\n  (reduce\n    (fn [[vec {:keys [id]}]]\n       (conj vec (get id answers)))\n    []\n    cards))
1574208211928:(defn get-answers [cards answers]\n  (reduce\n    (fn [[vec {:keys [id]}]]\n       (conj vec (get id answers)))\n    []\n    cards))
1574208217797:(get-answers cards answer-maps)
1574208247408:answer-maps
1574208263403:(get-answers cards (get answer-maps 2))
1574208270171:(get answer-maps 2)
1574208284801:(def answers (get answer-maps 2))
1574208308791:answers
1574208318459:(get-answers cards answers)
1574208337705:cards
1574208353530:(count cards)
1574208435252:(reduce\n    (fn [[v {:keys [id]}]]\n       (conj v (get id answers)))\n    []\n    cards)
1574208459254:(reduce\n    (fn [[v {:keys [id]}]]\n       (conj v 1))\n    []\n    cards)
1574208489007:(conj [] 1)
1574208500013:(reduce\n    (fn [[v {:keys [id]}]]\n       (conj v 1))\n    []\n    cards)
1574208549557:(reduce\n    (fn [[v {:keys [id]}]]\n       (conj v id))\n    []\n    cards)
1574208796303:answers
1574208816230:(reduce\n    (fn [[v {:keys [id]}]]\n       [123])\n    []\n    cards)
1574208826252:(reduce\n    (fn [[v {:keys [id]}]]\n       v)\n    []\n    cards)
1574208852353:(reduce\n    (fn [[v {:keys [id]}]]\n       v)\n    1\n    cards)
1574208863915:(reduce\n    (fn [[v {:keys [id]}]]\n       v)\n    {}\n    cards)
1574208897894:(reduce (fn [[a b]] (prn a)) [1 2 3])
1574208916605:(reduce (fn [a b] (prn a)) [1 2 3])
1574208937482:(defn get-answers [cards answers]\n  (reduce\n    (fn [[v {:keys [id]}]]\n       (conj v (get id answers)))\n    []\n    cards))
1574208947004:(get answers card answers)
1574208958014:(get answers cards answers)
1574208990600:(get-nswers cards answers)
1574209002711:(get-answers cards answers)
1574209011898:(defn get-answers [cards answers]\n  (reduce\n    (fn [v {:keys [id]}]\n       (conj v (get id answers)))\n    []\n    cards))
1574209015485:(get-answers cards answers)
1574209035567:cards
1574209050826:answers
1574209089734:(get answers 21)
1574209095610:(get answers 23\n     )
1574209108185:(map :id cards)
1574209123107:(defn get-answers [cards answers]\n  (reduce\n    (fn [v {:keys [id]}]\n       (conj v (get id answers)))\n    []\n    cards))
1574209131221:(get-answers cards answers)
1574209145814:(defn get-answers [cards answers]\n  (reduce\n    (fn [v {:keys [id]}]\n        (prn id)\n       (conj v (get id answers)))\n    []\n    cards))
1574209148567:(get-answers cards answers)
1574209175213:(get 21 answers)
1574209183645:(defn get-answers [cards answers]\n  (reduce\n    (fn [v {:keys [id]}]\n        (prn id)\n       (conj v (get answers id)))\n    []\n    cards))
1574209187300:(get-answers cards answers)
1574209309839:@(rf/subscribe [:stats/table-stats])
1574536852903:{require '[re-frame.core :as rf])
1574536865035:(require '[re-frame.core :as rf])
1576433507946:(require '[re-frame.core :as rf])]
1576433510236:(require '[re-frame.core :as rf])
1576433521905:@(rf/subscribe [:make-list/groups])
